import timeit

# Implementarea algoritmului Boyer-Moore
def boyer_moore(text, pattern):
    def preprocess_strong_suffix(shift, bpos, pat, m):
        i, j = m, m + 1
        bpos[i] = j
        while i > 0:
            while j <= m and pat[i - 1] != pat[j - 1]:
                if shift[j] == 0:
                    shift[j] = j - i
                j = bpos[j]
            i -= 1
            j -= 1
            bpos[i] = j

    def preprocess_case2(shift, bpos, m):
        j = bpos[0]
        for i in range(m + 1):
            if shift[i] == 0:
                shift[i] = j
            if i == j:
                j = bpos[j]

    def search(txt, pat):
        n, m = len(txt), len(pat)
        bpos = [0] * (m + 1)
        shift = [0] * (m + 1)
        preprocess_strong_suffix(shift, bpos, pat, m)
        preprocess_case2(shift, bpos, m)
        s = 0
        while s <= n - m:
            j = m - 1
            while j >= 0 and pat[j] == txt[s + j]:
                j -= 1
            if j < 0:
                return s
                s += shift[0]
            else:
                s += shift[j + 1]
        return -1

    return search(text, pattern)

# Implementarea algoritmului Knuth-Morris-Pratt
def knuth_morris_pratt(text, pattern):
    def kmp_search(pat, txt):
        M, N = len(pat), len(txt)
        lps = [0] * M
        j = 0
        compute_lps_array(pat, M, lps)
        i = 0
        while i < N:
            if pat[j] == txt[i]:
                i += 1
                j += 1
            if j == M:
                return i - j
                j = lps[j - 1]
            elif i < N and pat[j] != txt[i]:
                if j != 0:
                    j = lps[j - 1]
                else:
                    i += 1
        return -1

    def compute_lps_array(pat, M, lps):
        length = 0
        lps[0] = 0
        i = 1
        while i < M:
            if pat[i] == pat[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1

    return kmp_search(pattern, text)

# Implementarea algoritmului Rabin-Karp
def rabin_karp(text, pattern, q=101):
    d = 256
    M = len(pattern)
    N = len(text)
    p = 0
    t = 0
    h = 1
    for i in range(M - 1):
        h = (h * d) % q
    for i in range(M):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q
    for i in range(N - M + 1):
        if p == t:
            if text[i:i + M] == pattern:
                return i
        if i < N - M:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + M])) % q
            if t < 0:
                t += q
    return -1

# Text de exemplu și subșiruri de căutat
text_example = "This is a sample text for testing substring search algorithms. It includes multiple examples and some repetitions."
substrings = {
    'existing': 'substring search',
    'non_existing': 'quantum physics'
}

# Funcții pentru măsurători timeit
def bm_existing():
    boyer_moore(text_example, substrings['existing'])

def kmp_existing():
    knuth_morris_pratt(text_example, substrings['existing'])

def rk_existing():
    rabin_karp(text_example, substrings['existing'])

def bm_non_existing():
    boyer_moore(text_example, substrings['non_existing'])

def kmp_non_existing():
    knuth_morris_pratt(text_example, substrings['non_existing'])

def rk_non_existing():
    rabin_karp(text_example, substrings['non_existing'])

# Măsurarea timpilor de execuție folosind timeit
results = {
    'existing': {},
    'non_existing': {}
}

results['existing']['Boyer-Moore'] = timeit.timeit(bm_existing, number=100)
results['existing']['Knuth-Morris-Pratt'] = timeit.timeit(kmp_existing, number=100)
results['existing']['Rabin-Karp'] = timeit.timeit(rk_existing, number=100)

results['non_existing']['Boyer-Moore'] = timeit.timeit(bm_non_existing, number=100)
results['non_existing']['Knuth-Morris-Pratt'] = timeit.timeit(kmp_non_existing, number=100)
results['non_existing']['Rabin-Karp'] = timeit.timeit(rk_non_existing, number=100)

print(results)